Name     GB_MEMBAK_V1_3_ATF1502AS ;
PartNo   00 ;
Date     2023/03/19 ;
Revision 00 ;
Designer SONIC3D ;
Company  SONIC3D ;
Assembly GB_MEMBAK_PCB_v1_3 ;
Location U3 ;
Device   f1502ispplcc44 ;

/* ReadMe:                                                                      */
/*                                                                              */
/* This project contains logic equations to turn the cart into a Nintendo       */
/* Gameboy memory storage cart. Compatibility depends on the boot ROM code      */
/* inside this cart.                                                            */

/* ATF15xx usable extention:                                                    */
/*      D, T, S, R, L                                                           */
/*      OE, OEMUX                                                               */
/*      CK, CKMUX                                                               */
/*      CE                                                                      */
/*      AR, AP                                                                  */
/*      DQ, LQ, LE                                                              */
/*      IO, IOD, IOL                                                            */
/*      IOCK, IOAR                                                              */
/* Notes:                                                                       */
/*      L, CE, AP, LE are missed in doc3303, but tested usable in 1504 fitter)  */
/* Documents:                                                                   */
/*      doc3303_AN_3303 - Converting ABEL Design Files to CUPL)                 */
/*      doc0737_WinCUPL USER MANUAL                                             */
/*      Atmel-3614-CPLD-ATF15-Overview                                          */
/*      file:///C:/Wincupl/WinCupl/AtmelHlp/Devhelp.pdf                         */

/* *************** INPUT PINS *********************/
PIN 1   = AWR_n                   ; /*                                 */
PIN 2   = ARD_n                   ; /*                                 */
PIN 8   = AA7                     ; /* Unused                          */
PIN 9   = AA8                     ; /* Unused                          */
PIN 11  = AA9                     ; /* Unused                          */
PIN 12  = AA10                    ; /* Unused                          */
PIN 14  = AA11                    ; /* Unused                          */
PIN 16  = AA12                    ; /* Unused                          */
PIN 17  = AA13                    ; /*                                 */
PIN 18  = AA14                    ; /*                                 */
PIN 19  = AA15                    ; /*                                 */
PIN 20  = AD0                     ; /*                                 */
PIN 21  = AD1                     ; /*                                 */
PIN 24  = AD2                     ; /*                                 */
PIN 25  = AD3                     ; /*                                 */
PIN 26  = AD4                     ; /* Unused                          */
PIN 27  = AD5                     ; /*                                 */
PIN 28  = AD6                     ; /*                                 */
PIN 29  = AD7                     ; /*                                 */
PIN 43  = ARST_n                  ; /*                                 */
PIN 44  = SW_1_n                  ; /*                                 */

/* *************** OUTPUT PINS *********************/
PIN 4   = AA15_T                  ; /*                                 */
PIN 5   = AWR_T_n                 ; /*                                 */
PIN 6   = ARD_T_n                 ; /*                                 */
PIN 31  = HC373_010_LE            ; /*                                 */
PIN 33  = HC373_040_LE            ; /*                                 */
PIN 34  = RAM_A16                 ; /*                                 */
PIN 36  = RAM_A15                 ; /*                                 */
PIN 37  = RAM_A14                 ; /*                                 */
PIN 39  = F_CE_040_n              ; /*                                 */
PIN 40  = F_CE_010_n              ; /*                                 */
PIN 41  = RAM_CE_n                ; /*                                 */

/* *********** INPUT/OUTPUT PINS *******************/

/* ********** REGISTERED OUTPUT PINS ***************/

/* ******************* NODEs ***********************/
NODE IO_0x0000_0x1FFF_WR          ; /*                                 */
NODE IO_0x2000_0x3FFF_WR          ; /*                                 */
NODE IO_0x4000_0x5FFF_WR          ; /*                                 */
NODE IO_0x6000_0x7FFF_WR          ; /*                                 */
NODE ADDR_0xA000_0xBFFF           ; /*                                 */
NODE DATA_L4BITS_IS_0x4           ; /*                                 */
NODE DATA_L4BITS_IS_0xA           ; /*                                 */

NODE MODE_ID_0_PassThru           ; /*                                 */
NODE MODE_ID_1_MBC1_Emu           ; /*                                 */
NODE MODE_ID_2_GameCart           ; /*                                 */
NODE MODE_ID_3_PrgROMMap          ; /*                                 */
NODE MODE_ID_4_StoROMMap          ; /*                                 */
NODE MODE_ID_5_RAMMap             ; /*                                 */

/* ****************** PINNODES *********************/
/* Check fitter documentation P.15 */
/* for valid feedback node number. */
PINNODE 610 = SW_1_OnPower_n      ; /* Latch the SW_1_n state on power-on                       */
PINNODE 611 = PrimaryMode_B0      ; /* [PrimaryMode_B1..0] are used to select PrimaryMode 1-4   */
PINNODE 612 = PrimaryMode_B1      ;
PINNODE 613 = PrimaryMode_B2      ; /* PrimaryMode_B2 is used to select PrimaryMode 5           */
PINNODE 614 = SecondaryMode       ; /* SecondaryMode is use to enable $Axxx RAM mapping         */

PINNODE 620 = MBC1_0x6000_MODE    ; /* The 0x6000-0x7FFF I/O driven register. Used to enable RAM banking ability. */

PINNODE 621 = RAM_A14_INNER_REG   ;
PINNODE 622 = RAM_A15_INNER_REG   ;
PINNODE 623 = RAM_A16_INNER_REG   ;

/* ****** Output and output enable equations *******/

IO_0x0000_0x1FFF_WR = !AWR_n & !AA15 & !AA14 & !AA13;   /* Write access to 0x0000-0x1FFF */
IO_0x2000_0x3FFF_WR = !AWR_n & !AA15 & !AA14 &  AA13;   /* Write access to 0x2000-0x3FFF */
IO_0x4000_0x5FFF_WR = !AWR_n & !AA15 &  AA14 & !AA13;   /* Write access to 0x4000-0x5FFF */
IO_0x6000_0x7FFF_WR = !AWR_n & !AA15 &  AA14 &  AA13;   /* Write access to 0x6000-0x7FFF */
ADDR_0xA000_0xBFFF  =  AA15 & !AA14 &  AA13;            /* Address range of 0xA000-0xBFFF */
DATA_L4BITS_IS_0x4  = !AD3 &  AD2 & !AD1 & !AD0;        /* Data[3:0] is $4 */
DATA_L4BITS_IS_0xA  =  AD3 & !AD2 &  AD1 &  AD0;        /* Data[3:0] is $A */

/* ----- [BEGIN] Buried nodes logic ----- */
SW_1_OnPower_n.ck   = ARST_n;
SW_1_OnPower_n.d    = SW_1_n;               /* Latch the SW_1_n state on power-on power-on(The /Reset signal goes from low to high on power-on.)    */

PrimaryMode_B2.ar   = IO_0x2000_0x3FFF_WR;  /* Any value write to 0x2000 I/O will switch off the PrimaryMode 5.                                     */
/* PrimaryMode_B2.ap   = IO_0x0000_0x1FFF_WR & DATA_L4BITS_IS_0x4;*/ /* Write $4 to 0x0000-0x1FFF I/O will switch on the PrimaryMode 5.                  */
PrimaryMode_B2.ck   = IO_0x0000_0x1FFF_WR;  /* On value write to 0x0000-0x1FFF I/O.                                                                 */
PrimaryMode_B2.d    = DATA_L4BITS_IS_0x4    /* Write $4 to 0x0000-0x1FFF I/O will switch on the PrimaryMode 5.                                      */
                    # PrimaryMode_B2;       /* if PrimaryMode_B2 is already set, then keep it set, stay in PrimaryMode 5.                           */

PrimaryMode_B1.ck   = IO_0x2000_0x3FFF_WR;  /* On value write to 0x2000                                                                             */
PrimaryMode_B0.ck   = IO_0x2000_0x3FFF_WR;
    /* PrimaryMode_B1,B0 =  00: PrimaryMode 1, MBC1 emulation mode.                                             */
    /*                      01: PrimaryMode 2, MemoryBackup - GameCart mode.                                    */
    /*                      10: PrimaryMode 3, MemoryBackup - PRG ROM mapping mode.                             */
    /*                      11: PrimaryMode 4, MemoryBackup - Storage ROM mapping mode.                         */
PrimaryMode_B1.d    = AD7 & !AD6 &  AD5     /* PrimaryMode 3, writing 'b'101xxxxx to 0x2000 I/O will switch on the PrimaryMode 3.                   */
                    # AD7 & !AD6 & !AD5;    /* PrimaryMode 4, writing 'b'100xxxxx to 0x2000 I/O will switch on the PrimaryMode 4.                   */
PrimaryMode_B0.d    = AD7 &  AD6            /* PrimaryMode 2, writing 'b'11xxxxxx to 0x2000 I/O will switch on the PrimaryMode 2.                   */
                    # AD7 & !AD6 & !AD5;    /* PrimaryMode 4, writing 'b'100xxxxx to 0x2000 I/O will switch on the PrimaryMode 4.                   */

SecondaryMode.ck    = IO_0x0000_0x1FFF_WR; /* On value write to 0x0000-0x1FFF I/O. */
SecondaryMode.d     = DATA_L4BITS_IS_0xA;  /* Enable mapping RAM on 0xA000-0xBFFF if the low 4bits value on the data bus is $A                      */

MBC1_0x6000_MODE.ck = (!PrimaryMode_B2 & !PrimaryMode_B1 & !PrimaryMode_B0) & IO_0x6000_0x7FFF_WR;  /* In PrimaryMode 1(MBC1 emulation mode), write value to 0x6000-0x7FFF  */
MBC1_0x6000_MODE.d  = AD0;                 /* Enable RAM banking ability on writing 'b'xxxxxxx1.                */
/* ----- [END] Buried nodes logic ----- */

/* ----- [BEGIN] Simplified expression ----- */
MODE_ID_0_PassThru  =  SW_1_OnPower_n;  /* PrimaryMode 0, Pass-Through mode. */
MODE_ID_1_MBC1_Emu  = !SW_1_OnPower_n & (!PrimaryMode_B2 & !PrimaryMode_B1 & !PrimaryMode_B0);  /* PrimaryMode 1, MBC1 emulation mode. */
MODE_ID_2_GameCart  = !SW_1_OnPower_n & (!PrimaryMode_B2 & !PrimaryMode_B1 &  PrimaryMode_B0);  /* PrimaryMode 2, MemoryBackup - GameCart mode. */
MODE_ID_3_PrgROMMap = !SW_1_OnPower_n & (!PrimaryMode_B2 &  PrimaryMode_B1 & !PrimaryMode_B0);  /* PrimaryMode 3, MemoryBackup - PRG ROM mapping mode. */
MODE_ID_4_StoROMMap = !SW_1_OnPower_n & (!PrimaryMode_B2 &  PrimaryMode_B1 &  PrimaryMode_B0);  /* PrimaryMode 4, MemoryBackup - Storage ROM mapping mode. */
MODE_ID_5_RAMMap    = !SW_1_OnPower_n & PrimaryMode_B2;                                         /* PrimaryMode 5, MemoryBackup - RAM mapping mode. */
/* ----- [END] Simplified expression ----- */

/* ----- [BEGIN] Control signal expression ----- */
!ARD_T_n    = SW_1_OnPower_n & !ARD_n                       /* Switch is turned off, pass-through */
            # MODE_ID_2_GameCart & !ARD_n & (AA15 # AA14);  /* Switch is turned on, and stays in GameCart Mode and read 0x4000-0xFFFF(pass-through partial read) */

!AWR_T_n    = SW_1_OnPower_n & !AWR_n       /* Switch is turned off, pass-through */
            # MODE_ID_2_GameCart & !AWR_n;  /* Switch is turned on, and stays in GameCart Mode and write 0x0000-0xFFFF(pass-through all write) */

AA15_T      = SW_1_OnPower_n & AA15         /* Switch is turned off, pass-through */
            # MODE_ID_2_GameCart & AA15;    /* Switch is turned on, and stays in GameCart Mode and AA15=1 */

!F_CE_040_n = MODE_ID_4_StoROMMap & !AA15 & AA14;  /* Switch is turned on, and stays in MemoryBackup Mode, and not in Flash010_Only mode, and R/W accessing 0x4000-0x7FFF. */

!F_CE_010_n = MODE_ID_3_PrgROMMap & !AA15 & AA14        /* Switch is turned on, and stays in MemoryBackup Mode, and in Flash010_Only mode, and R/W accessing 0x4000-0x7FFF. */
            # !SW_1_OnPower_n & !ARD_n & !AA15 & !AA14; /* Switch is turned on, and stays in MemoryBackup Mode, and Read accessing 0x0000-0x3FFF(write access goes to the mapper register). */

!RAM_CE_n   = MODE_ID_5_RAMMap & !AA15 & AA14       /* Primary Mode 5 and R/W accessing 0x4000-0x7FFF */
            # MODE_ID_1_MBC1_Emu & SecondaryMode & ADDR_0xA000_0xBFFF   /* Primary Mode 1 MBC emulation mode, and SecondaryMode is enabled, and R/W accessing 0xA000-0xBFFF */
            # MODE_ID_3_PrgROMMap & SecondaryMode & ADDR_0xA000_0xBFFF  /* Primary Mode 3 PRG ROM mapping mode, and SecondaryMode is enabled, and R/W accessing 0xA000-0xBFFF */
            # MODE_ID_4_StoROMMap & SecondaryMode & ADDR_0xA000_0xBFFF  /* Primary Mode 4 Storage ROM mapping mode, and SecondaryMode is enabled, and R/W accessing 0xA000-0xBFFF */
            # MODE_ID_5_RAMMap & SecondaryMode & ADDR_0xA000_0xBFFF;    /* Primary Mode 5 RAM mapping mode, and SecondaryMode is enabled, and R/W accessing 0xA000-0xBFFF */
/* ----- [END] Control signal expression ----- */

/* ----- [BEGIN] Program ROM/Storage ROM banking address line latch ----- */
/* Write to 0x2000 with value: 'b'100xxxxx, switch the storage ROM 28SF040 bank with D[4..0] */
HC373_040_LE    = IO_0x2000_0x3FFF_WR &  AD7 & !AD6 & !AD5; /* Extended I/O write to 0x2000 I/O, and data bit 6 is 0(memory backup cart mode) and data bit 5 is 0(set 28SF040 bank) */
/* Write to 0x2000 with value: 'b'101xxxxx or 'b'0xxxxxxx, switch the program ROM AT29C010 bank with D[4..0] */
HC373_010_LE    = IO_0x2000_0x3FFF_WR &  AD7 & !AD6 &  AD5  /* Extended I/O write to 0x2000 I/O, and data bit 6 is 0(memory backup cart mode) and data bit 5 is 0(set AT29C010 bank) */
                # IO_0x2000_0x3FFF_WR & !AD7;               /* Or normal I/O write to 0x2000 I/O, as an MBC 1. */
/* ----- [END] Program ROM/Storage ROM banking address line latch ----- */

/* ----- [BEGIN] RAM banking address line latch ----- */
/* Extended MBC1 0x4000 I/O register from low 2 bits to low 3 bits          */
RAM_A16_INNER_REG.ck  = (!PrimaryMode_B2 & !PrimaryMode_B1 & !PrimaryMode_B0) & IO_0x4000_0x5FFF_WR;  /* In PrimaryMode 1(MBC1 emulation mode), write value to 0x4000-0x5FFF  */
RAM_A15_INNER_REG.ck  = (!PrimaryMode_B2 & !PrimaryMode_B1 & !PrimaryMode_B0) & IO_0x4000_0x5FFF_WR;
RAM_A14_INNER_REG.ck  = (!PrimaryMode_B2 & !PrimaryMode_B1 & !PrimaryMode_B0) & IO_0x4000_0x5FFF_WR;
RAM_A16_INNER_REG.d   = AD2;
RAM_A15_INNER_REG.d   = AD1;
RAM_A14_INNER_REG.d   = AD0;
RAM_A16_INNER_REG.ar  = !ARST_n;
RAM_A15_INNER_REG.ar  = !ARST_n;
RAM_A14_INNER_REG.ar  = !ARST_n;

RAM_A16 = MBC1_0x6000_MODE & RAM_A16_INNER_REG;
RAM_A15 = MBC1_0x6000_MODE & RAM_A15_INNER_REG;
RAM_A14 = MBC1_0x6000_MODE & RAM_A14_INNER_REG;
/* ----- [END] RAM banking address line latch ----- */


/* End */
